[alias]
last_four_hours = report invoke last_four_pump_hours.json last_four_cgm_hours.json
gather-profile = report invoke settings/settings.json settings/bg_targets.json settings/insulin_sensitivities.json settings/basal_profile.json settings/profile.json
monitor-pump = report invoke monitor/clock.json monitor/temp_basal.json monitor/pumphistory.json monitor/iob.json
get-settings = report invoke settings/bg_targets.json settings/insulin_sensitivities.json settings/basal_profile.json settings/settings.json settings/profile.json
monitor-cgm = report invoke monitor/glucose.json
gather = ! bash -c "rm monitor/*; openaps monitor-cgm && openaps monitor-pump && openaps get-settings"
enact = ! bash -c "rm enact/suggested.json; openaps report invoke enact/suggested.json && cat enact/suggested.json && grep -q duration enact/suggested.json && ( openaps report invoke enact/enacted.json && cat enact/enacted.json ) || echo No action required"
loop = ! bash -c "openaps monitor-cgm 2>/dev/null && ( openaps preflight && openaps gather-profile && openaps gather && openaps enact) || echo No CGM data."
preflight = ! bash -c "rm -f monitor/clock.json && openaps report invoke monitor/clock.json 2>/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || (mm-stick warmup || (sudo oref0-reset-usb && echo PREFLIGHT SLEEP && sleep 120); echo PREFLIGHT FAIL; exit 1)"
retry-loop = ! bash -c "until( ! mm-stick warmup || openaps loop); do sleep 5; done"

[device "saradexcom"]
vendor = openaps.vendors.dexcom
extra = saradexcom.ini

[device "oref0"]
vendor = openaps.vendors.process
extra = oref0.ini

[device "iob"]
vendor = openaps.vendors.process
extra = iob.ini

[device "get-profile"]
vendor = openaps.vendors.process
extra = get-profile.ini

[device "determine-basal"]
vendor = openaps.vendors.process
extra = determine-basal.ini

[device "calculate-iob"]
vendor = openaps.vendors.process
extra = calculate-iob.ini

[device "sarapump"]
vendor = openaps.vendors.medtronic
extra = sarapump.ini

[report "last_four_cgm_hours.json"]
count = 48
device = saradexcom
use = iter_glucose
reporter = JSON

[report "last_four_pump_hours.json"]
hours = 4.0
device = sarapump
use = iter_pump_hours
reporter = JSON

[report "recent_glucose_data.json"]
count = 100
device = saradexcom
use = iter_glucose
reporter = JSON

[report "monitor/temp_basal.json"]
device = sarapump
use = read_temp_basal
reporter = JSON

[report "monitor/pumphistory.json"]
hours = 4.0
device = sarapump
use = iter_pump_hours
reporter = JSON

[report "settings/bg_targets.json"]
device = sarapump
use = read_bg_targets
reporter = JSON

[report "monitor/clock.json"]
device = sarapump
use = read_clock
reporter = JSON

[report "settings/settings.json"]
device = sarapump
use = read_settings
reporter = JSON

[report "settings/insulin_sensitivities.json"]
device = sarapump
use = read_insulin_sensitivies
reporter = JSON

[report "settings/basal_profile.json"]
device = sarapump
use = read_selected_basal_profile
reporter = JSON

[report "settings/profile.json"]
use = shell
bg_targets = settings/bg_targets.json
settings = settings/settings.json
basal_profile = settings/basal_profile.json
reporter = text
json_default = True
max_iob = max_iob.json
device = get-profile
remainder = []
isf = settings/insulin_sensitivities.json

[report "monitor/iob.json"]
profile = settings/profile.json
use = shell
clock = monitor/clock.json
reporter = JSON
json_default = True
pumphistory = monitor/pumphistory.json
device = calculate-iob
remainder = []

[report "monitor/glucose.json"]
count = 5
device = saradexcom
use = iter_glucose
reporter = JSON

[report "enact/suggested.json"]
profile = settings/profile.json
use = shell
temp_basal = monitor/temp_basal.json
reporter = text
json_default = True
device = determine-basal
remainder = []
iob = monitor/iob.json
glucose = monitor/glucose.json

[report "enact/enacted.json"]
device = sarapump
input = enact/suggested.json
use = set_temp_basal
reporter = JSON

[report "model.json"]
device = sarapump
use = model
reporter = JSON

